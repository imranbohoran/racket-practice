;; Practice exercices
#lang racket

(define (double-every-other-element items)
  (define (doubling source result shouldDouble)
    (cond ((empty? source) result)
          (else (cond ((equal? shouldDouble #t) (doubling (cdr source) (append result (list (* (car source) 2))) #f))
                      (else (doubling (cdr source) (append result (list (car source))) #t))
                      )
                )
          )
    )
  (doubling items '() #f)
  )

(define (isort items)
  (define (insert item items)
    (cond ((empty? items) (list item))
          ((< item (car items)) (cons item items))
          (else (cons (car items) (insert item (cdr items))))
    )
  )
  (cond ((empty? items) items)
        (else (insert (car items) (isort (cdr items))))
  )
)

(define (square-list items)
  (map
   (lambda (value) (* value value))
   (filter (lambda (val) (> (modulo val 2) 0)) items)
  )
  )

(define (leap-year year)
  (cond ((> (modulo year 100) 0)
         (cond ((< (modulo year 4) 1) #t)
               ((< (modulo year 400) 1) #t)
               (else #f)
         )
        )
        (else #f)
        )
)

(define (replace-with number items)
  (define (process-replace number items result shouldReplace)
    (cond ((null? items) result)
          (else (cond ((equal? shouldReplace #t) (process-replace number (cdr items) (append result (list number)) #f))
                 (else (process-replace number (cdr items) (append result (list (car items))) #t))
                 )
                )
    )
  )

  (process-replace number items '() #t)
)

(define (my-append item items)
  (cons item items)
)

(define (my-list-length items)
  (define (calculate-length items result)
    (cond ((empty? items) result)
          (else (calculate-length (cdr items) (+ result 1)))
    )
  )

  (calculate-length items 0)
  )
  
    
(provide double-every-other-element)
(provide isort)
(provide square-list)
(provide leap-year)
(provide replace-with)
(provide my-append)
(provide my-list-length)